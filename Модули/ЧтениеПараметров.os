#Использовать json

Перем мЧтениеJSON;
Перем мПрочитанныеПараметры;
Перем мОшибкиЧтения;

// Читает параметры из переданного объекта
//
// Параметры:
//  пОбъектЧтения  - Строка, Файл, Массив, Структура, Соответствие из строк и файлов - перечень путей к файлу или файлов
//					 из которых нужно прочитать параметры
//	пОшибкиЧтения - Соответствие - имя файла и описание ошибки, если не удалось прочитать параметры
//
// Возвращаемое значение:
//   Соответствие   - Параметры, прочитанные в соответствие
//
Функция Прочитать( Знач пОбъектЧтения = Неопределено, пОшибкиЧтения = Неопределено ) Экспорт
	
	массивФайловДляЧтения = Новый Массив;

	ПрочитатьОбъектСФайламиРекурсивно( пОбъектЧтения, массивФайловДляЧтения );

	Если пОшибкиЧтения = Неопределено
		ИЛИ Не ТипЗнч( пОшибкиЧтения ) = Тип("Соответствие") Тогда
		пОшибкиЧтения = Новый Соответствие;
	КонецЕсли;

	мЧтениеJSON = Новый ПарсерJSON;
	мОшибкиЧтения = Новый Соответствие;
	мПрочитанныеПараметры = Новый Соответствие;

	Для каждого цИмяФайл Из массивФайловДляЧтения Цикл
		
		ПрочитатьФайл( цИмяФайл );
		
	КонецЦикла;

	ВыполнитьПодстановки();

	пОшибкиЧтения = мОшибкиЧтения;

	Возврат мПрочитанныеПараметры;	
	
КонецФункции

Процедура ПрочитатьОбъектСФайламиРекурсивно( Знач пОбъектЧтения, пМассивПрочитанныхЗначений )
	
	Если ТипЗнч( пОбъектЧтения ) = Тип("Строка") Тогда
		ДобавитьВМассив( пМассивПрочитанныхЗначений, пОбъектЧтения );
	ИначеЕсли ТипЗнч( пОбъектЧтения ) = Тип( "Файл" ) Тогда
		ДобавитьВМассив( пМассивПрочитанныхЗначений, пОбъектЧтения.ПолноеИмя );
	ИначеЕсли ТипЗнч( пОбъектЧтения ) = Тип("Массив") Тогда
		Для каждого цЭлемент Из пОбъектЧтения Цикл
			ПрочитатьОбъектСФайламиРекурсивно( цЭлемент, пМассивПрочитанныхЗначений );
		КонецЦикла;
	ИначеЕсли ТипЗнч( пОбъектЧтения ) = Тип("Структура")
		ИЛИ ТипЗнч( пОбъектЧтения ) = Тип("Соответствие") Тогда
		Для каждого цЭлемент Из пОбъектЧтения Цикл
			ПрочитатьОбъектСФайламиРекурсивно( цЭлемент.Значение, пМассивПрочитанныхЗначений );
		КонецЦикла;
	ИначеЕсли Не ЗначениеЗаполнено( пОбъектЧтения ) Тогда		
		Для каждого цЭлемент Из НайтиФайлы( ПапкаПоискаПоУмолчанию(), МаскаПоискаФайлаПоУмолчанию(), Ложь ) Цикл
			ПрочитатьОбъектСФайламиРекурсивно( цЭлемент, пМассивПрочитанныхЗначений );
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьВМассив( пМассив, Знач пЗначение, Знач пТолькоУникальныеЗначения = Истина)
	
	Если пТолькоУникальныеЗначения Тогда
		
		Если пМассив.Найти( пЗначение ) = Неопределено Тогда
			пМассив.Добавить(пЗначение);
		КонецЕсли;

	Иначе
		пМассив.Добавить( пЗначение );
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьФайл( Знач пПолныйПутьКЧитаемомуФайлу )
	
	Если Не ФайлСуществует( пПолныйПутьКЧитаемомуФайлу ) Тогда			
		мОшибкиЧтения.Вставить( пПолныйПутьКЧитаемомуФайлу, "Не существует");
		Возврат;			
	КонецЕсли;
	
	Попытка
		текстФайла = ПолучитьТекстИзФайла( пПолныйПутьКЧитаемомуФайлу );
	Исключение
		мОшибкиЧтения.Вставить( пПолныйПутьКЧитаемомуФайлу, "Не удалось прочитать текст. " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Попытка
		текстФайлаБезКомментариев = ВырезатьКомментарии( текстФайла );
		параметрыИзФайла = мЧтениеJSON.ПрочитатьJSON(текстФайлаБезКомментариев,,,Истина);
	Исключение
		мОшибкиЧтения.Вставить( пПолныйПутьКЧитаемомуФайлу, "Не удалось прочитать JSON. " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	ПрочитатьПараметрыРекурсивно( параметрыИзФайла, пПолныйПутьКЧитаемомуФайлу );
	
КонецПроцедуры

Процедура ПрочитатьПараметрыРекурсивно( Знач пПараметры, Знач пПолныйПутьКЧитаемомуФайлу )
	
	Для каждого цЭлемент Из пПараметры Цикл
		
		Если ТипЗнч( цЭлемент.Значение ) = Тип("Структура")
			ИЛИ ТипЗнч( цЭлемент.Значение ) = Тип("Соответствие") Тогда
			
			ПрочитатьПараметрыРекурсивно( цЭлемент.Значение, пПолныйПутьКЧитаемомуФайлу );
			
		Иначе
			
			мПрочитанныеПараметры.Вставить( цЭлемент.Ключ, цЭлемент.Значение );
			
			Если СтрНачинаетсяС( ВРег( цЭлемент.Ключ ), ВРег( Префикс_ПрочитатьФайл()) ) Тогда
				Если СтрНачинаетсяС( цЭлемент.Значение, "." ) Тогда
					
					файл = Новый Файл( пПолныйПутьКЧитаемомуФайлу );
					путьКФайлу = ОбъединитьПути( файл.Путь, цЭлемент.Значение );

				Иначе
					путьКФайлу = цЭлемент.Значение;
				КонецЕсли;
				
				ПрочитатьФайл( путьКФайлу );

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПодстановки()
	
	количествоПопыток = 10;
	количествоЭлементовСПодстановкой = мПрочитанныеПараметры.Количество();

	Для ц = 1 По количествоПопыток Цикл

		массивЭлементов = Новый Массив;
		Для каждого цЭлемент Из мПрочитанныеПараметры Цикл

			Если ТипЗнч( цЭлемент.Значение ) = Тип( "Строка")
				И СтрНайти( цЭлемент.Значение, "%" ) > 0 Тогда
				массивЭлементов.Добавить(цЭлемент);
			КонецЕсли;

		КонецЦикла;

		Если количествоЭлементовСПодстановкой = массивЭлементов.Количество()
			И Не количествоЭлементовСПодстановкой = мПрочитанныеПараметры.Количество() Тогда
			Прервать;
		КонецЕсли;

		количествоЭлементовСПодстановкой = массивЭлементов.Количество();

		Для каждого цЭлемент Из массивЭлементов Цикл

			ВыполнитьПодстановкуЭлементу(цЭлемент);

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьПодстановкуЭлементу( пЭлемент )

	Если Не ТипЗнч( пЭлемент.Значение ) = Тип( "Строка") Тогда
		Возврат;		
	КонецЕсли;

	результат = пЭлемент.Значение;

	регулярноеВыражение = Новый РегулярноеВыражение( "%([^%]*)%" );

	массивСовпадений = регулярноеВыражение.НайтиСовпадения( результат );

	Для каждого цЭлемент Из массивСовпадений Цикл

		ключ = СтрЗаменить( цЭлемент.Значение, "%", "" );

		найденноеЗначение = мПрочитанныеПараметры[ключ];

		Если Не найденноеЗначение = Неопределено Тогда
			результат = СтрЗаменить( результат, "%" + ключ + "%", найденноеЗначение );
		КонецЕсли;

	КонецЦикла;

	Если Не результат = пЭлемент.Значение Тогда
		мПрочитанныеПараметры.Вставить( пЭлемент.Ключ, результат );
	КонецЕсли;

КонецПроцедуры

Функция Префикс_ПрочитатьФайл()
	Возврат "ReadFile";
КонецФункции

Функция ПапкаПоискаПоУмолчанию()
	Возврат ТекущийКаталог();
КонецФункции

Функция МаскаПоискаФайлаПоУмолчанию()
	Возврат "param_os.json";
КонецФункции

Функция ФайлСуществует( Знач пПутьКФайлу )
	
	файл = Новый Файл( пПутьКФайлу );
	Возврат файл.Существует() И файл.ЭтоФайл();

КонецФункции

Функция ПолучитьТекстИзФайла( Знач пИмяФайла )
	
	прочитанныйТекст = "";
	чтениеТекста = Новый ЧтениеТекста(пИмяФайла, КодировкаТекста.UTF8);
	прочитанныйТекст = чтениеТекста.Прочитать();
	чтениеТекста.Закрыть();
	возврат прочитанныйТекст;

КонецФункции

// Удаляет все комментарии // и блоки /* */
Функция ВырезатьКомментарии( Знач пТекст )
	
	регулярноеВыражение = Новый РегулярноеВыражение( "(@(?:""[^""]*"")+|""(?:[^""\n\\]+|\\.)*""|'(?:[^'\n\\]+|\\.)*')|//.*|/\*(?s:.*?)\*/" );
	
	ЗначениеБезКомментариев = регулярноеВыражение.Заменить(пТекст, "$1" );

	// После удаления комментария могли остаться пустые строки
	Пока СтрНайти( ЗначениеБезКомментариев, Символы.LF + Символы.LF ) > 0 Цикл
		ЗначениеБезКомментариев = СтрЗаменить( ЗначениеБезКомментариев, Символы.LF + Символы.LF, Символы.LF )
	КонецЦикла;

	Возврат ЗначениеБезКомментариев;

КонецФункции