#Использовать ".."
#Использовать asserts
#Использовать fs
#Использовать tempfiles


Перем юТест;

Процедура Инициализация()
	
КонецПроцедуры

Функция ПолучитьСписокТестов(Тестирование) Экспорт
	
	юТест = Тестирование;
	
	СписокТестов = Новый Массив;
	СписокТестов.Добавить("Тест_ОшибкаЧтенияНесуществующегоФайла");
	СписокТестов.Добавить("Тест_ПрочитатьФайлПараметров");

	Возврат СписокТестов;
	
КонецФункции

Процедура ПослеЗапускаТеста() Экспорт

КонецПроцедуры

Процедура Тест_ОшибкаЧтенияНесуществующегоФайла() Экспорт
	
	ВременныйКаталог = ВременныеФайлы.СоздатьКаталог();
	файлПараметров = ОбъединитьПути( ВременныйКаталог, "НесуществующийФайл.json");

	ошибкиЧтения = Неопределено;

	прочитанныеПараметры = ЧтениеПараметров.Прочитать( файлПараметров, ошибкиЧтения );

	Утверждения.ПроверитьРавенство( ТипЗнч(прочитанныеПараметры), Тип("Соответствие"), "Прочитанные параметры должны быть с типом Соответствие");
	Утверждения.ПроверитьРавенство( прочитанныеПараметры.Количество(), 0, "Прочитанных параметров должно быть 0");

	Утверждения.ПроверитьРавенство( ТипЗнч(ошибкиЧтения), Тип("Соответствие"), "Ошибки чтения должны быть с типом Соответствие");
	Утверждения.ПроверитьРавенство( ошибкиЧтения.Количество(), 1, "Должна быть одна ошибка чтения");
	Утверждения.ПроверитьРавенство( ошибкиЧтения[файлПараметров], "Не существует", "Ошибка чтения должна быть ""Не существует""");
	
	ВременныеФайлы.УдалитьФайл( ВременныйКаталог );
	
КонецПроцедуры

Процедура Тест_ПрочитатьФайлПараметров() Экспорт
	
	ВременныйКаталог = ВременныеФайлы.СоздатьКаталог();
	файлПараметров = ОбъединитьПути( ВременныйКаталог, "testParam.json");

	записьТекста = Новый ЗаписьТекста(файлПараметров);
	ЗаписьТекста.ЗаписатьСтроку( "{""парам.Число"": 100, ""парам.Строка"": ""100"", ""парам.Булево"": true}" );
	ЗаписьТекста.Закрыть();

	ошибкиЧтения = Неопределено;

	прочитанныеПараметры = ЧтениеПараметров.Прочитать( файлПараметров, ошибкиЧтения );


	Утверждения.ПроверитьРавенство( ТипЗнч(прочитанныеПараметры), Тип("Соответствие"), "Прочитанные параметры должны быть с типом Соответствие");
	Утверждения.ПроверитьРавенство( прочитанныеПараметры.Количество(), 3, "Прочитанных параметров должно быть 3");

	Утверждения.ПроверитьРавенство( ТипЗнч(ошибкиЧтения), Тип("Соответствие"), "Ошибки чтения должны быть с типом Соответствие");
	Утверждения.ПроверитьРавенство( ошибкиЧтения.Количество(), 0, "Ошибок чтения быть не должно");
	
	Утверждения.ПроверитьРавенство( прочитанныеПараметры["парам.Число"], 100, "Должно быть парам.Число = 100");
	Утверждения.ПроверитьРавенство( прочитанныеПараметры["парам.Строка"], "100", "Должно быть парам.Строка = ""100""");
	Утверждения.ПроверитьРавенство( прочитанныеПараметры["парам.Булево"], Истина, "Должно быть парам.Булево = Истина");
	
КонецПроцедуры

